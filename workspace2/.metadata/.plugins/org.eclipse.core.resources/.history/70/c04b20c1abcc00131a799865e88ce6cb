package segregateevenadnoddnodes;




public class LinkedList<E > implements Cloneable {
	Node<E> head = null;
	

	// Adding at the End
	class Node<T > {
		T value;
		Node<T> nextReference;

		public Node(T value) {
			this.value = value;
			this.nextReference = null;
		}

		public Node(T value, Node<T> ref) {
			this.value = value;
			this.nextReference = ref;
		}

		public Node() {
			// TODO Auto-generated constructor stub
		}

		public T getValue() {
			return value;
		}

		public void setValue(T value) {
			this.value = value;
		}

		public Node<T> getNextReference() {
			return nextReference;
		}

		public void setNextReference(Node<T> nextReference) {
			this.nextReference = nextReference;
		}
	}

	public void add(E value) {
		Node<E> nodeToBeAdded = head;
		if (validate(head)) {
			head = new Node<E>(value);
			return;
		}

		while (nodeToBeAdded.getNextReference() != null) {
			nodeToBeAdded = nodeToBeAdded.getNextReference();
		}
		Node<E> node = new Node<E>(value);
		nodeToBeAdded.setNextReference(node);

	}

	
	
	void printAll(Node<E> head) {
		Node<E> node =head ;
		while (node != null) {
			System.out.println(node.getValue());
			node = node.getNextReference();
		}

	}
	
	Node<E> tail=new Node<E>();
	Node<E> head1=null;
 void researchOnreverse(Node<E> node){
	 

	if(node==null){
		
		return;
	} 
	researchOnreverse(node.getNextReference());
	System.out.println(node.getValue());
	add(node.getValue());
	
}
 
 void add(Node<E> val){
	Node<E> node=new Node<E>(val.getValue());
	tail=node;
	 if(head1==null){
		head1=tail;
		return;
	 }
	 tail.setNextReference(node);
 }
 
/* public void add(Node<E> evenNodes,E value) {

     if (validate(head)) {
         head = node;

     } else {
         tail.setNextReference(node);
     }


 }*/
	public boolean validate(Node<E> head) {
		if (head == null) {
			return true;
		}
		return false;
	}

	
	
	public static void main(String[] args) {
		LinkedList<String> linkedList = new LinkedList<String>();
		
		linkedList.add("1");
		linkedList.add("2");
		linkedList.add("3");
		linkedList.add("4");
		linkedList.add("5");
		linkedList.add("8");
		linkedList.add("7");
		linkedList.researchOnreverse(linkedList.head);
		linkedList.printAll(linkedList.head1);
	

	}

}