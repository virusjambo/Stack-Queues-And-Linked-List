package mergetwosortedlinkedlist;


	public class LinkedList<E extends Number> implements Cloneable {
		Node<E> head = null;
		

		// Adding at the End
		class Node<T  extends Number > {
			T value;
			Node<T> nextReference;

			public Node(T value) {
				this.value = value;
				this.nextReference = null;
			}

			public Node(T value, Node<T> ref) {
				this.value = value;
				this.nextReference = ref;
			}

			public Node() {
				// TODO Auto-generated constructor stub
			}

			public T getValue() {
				return value;
			}

			public void setValue(T value) {
				this.value = value;
			}

			public Node<T> getNextReference() {
				return nextReference;
			}

			public void setNextReference(Node<T> nextReference) {
				this.nextReference = nextReference;
			}
		}

		public void add(E value) {
			Node<E> nodeToBeAdded = head;
			if (validate(head)) {
				head = new Node<E>(value);
				return;
			}

			while (nodeToBeAdded.getNextReference() != null) {
				nodeToBeAdded = nodeToBeAdded.getNextReference();
			}
			Node<E> node = new Node<E>(value);
			nodeToBeAdded.setNextReference(node);

		}

		Node<E> mergeTwoSortedLinkedList(LinkedList<E> linkedList,LinkedList<E> linkedList1){
			
			Node<E> mergedHead=null;
			Node<E> mergeTail=null;
			Node<E> head1=linkedList.head;
			Node<E> head2=linkedList1.head;
			while(head1!=null && head2!=null){
			if(head1.getValue().doubleValue()<=head2.getValue().doubleValue()){
				mergedAddition(mergedHead,mergeTail,head1);
				head2=head2.getNextReference();
			}else{
				mergedAddition(mergedHead,mergeTail,head2);	
				head1=head1.getNextReference();
			}
			}
			if(head1==null)
				mergedAddition(mergedHead,mergeTail,head2);	
			if(head2==null)
				mergedAddition(mergedHead,mergeTail,head1);
			return mergedHead;
			
		}
		void mergedAddition(Node<E> mergedHead,Node<E> mergeTail,Node<E>  value){
		if(mergedHead==null){
			mergedHead=new Node<E>(value.getValue());
			mergeTail=mergedHead;
		}
		mergeTail.setNextReference(value);	
		}
		
		void printAll(Node<E> node) {
			
			while (node != null) {
				System.out.println(node.getValue());
				node = node.getNextReference();
			}

		}
		
	Node<E> usingRecursive(Node<E> head,Node<E> head1){
		Node<E> result=null;
		if(head==null)
			return head1;
		if(head1==null)
			return head;
		if(head.getValue().doubleValue()<=head1.getValue().doubleValue()){
			result=head;
			result.nextReference=usingRecursive(head.getNextReference(),head1);
		}else{
			result=head1;
			result.nextReference=usingRecursive(head,head1.getNextReference());
		}
		return result;
		}

	Node<E> recursiveCall(LinkedList<E>linkedList,LinkedList<E>linkedList1){
		return usingRecursive(linkedList.head,linkedList.head);
	}
		public boolean validate(Node<E> head) {
			if (head == null) {
				return true;
			}
			return false;
		}

		
		public static void main(String[] args) {
			LinkedList<Integer> linkedList = new LinkedList<Integer>();
			LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
			linkedList.add(1);
			linkedList.add(2);
			
			
			linkedList1.add(2);
			linkedList1.add(3);
			
			
		
		
			
		//	linkedList.printAll(linkedList.mergeTwoSortedLinkedList(linkedList,linkedList1));
			linkedList.printAll(linkedList.recursiveCall(linkedList,linkedList1));

		}

	}




