package convertBinaryTreeInToDoubleLinkedList;


import createtreeusingagivearray.BinaryTree;
import createtreeusingagivearray.Node;

public class Tree <E>{

	 Node<E> convertComplexMethod1(Node<E> root){
		 if(root==null)
			 return root;
		 if(root.getLeftRef()!=null){
			 Node<E> temp=convertComplexMethod1(root.getLeftRef());
			 for(;temp.getRightRef()!=null;temp=temp.getRightRef());
			 temp.setRightRef(root);
			 root.setLeftRef(temp);	 
		 }
		 if(root.getRightRef()!=null){
			 Node<E> temp=convertComplexMethod1(root.getRightRef());
			 for(;temp.getLeftRef()!=null;temp=temp.getLeftRef());
			 temp.setLeftRef(root);
			 root.setRightRef(temp);
		 }
		return root;
	}
	 
	 void printDLL(Node<E> newRoot){
		 Node<E> root=newRoot;
		 while(root.getLeftRef()!=null){
			 
			 root=root.getLeftRef();
			 
		 }
		 while(root!=null){
			 System.out.println(root.getValue());
			 root=root.getRightRef();
		 }
		 
	 }
//Method 2 
	 Node<E> dllRoot=new Node<>();
	 Node<E> prev;
	void  convertComplexMethod2(Node<E> root){
		 if(root==null)
			 return ;
		 if(prev==null){
			 
		 }
	
	}
	 
		public static void main(String[] args) {
			BinaryTree<Integer> bt=new BinaryTree<>();
			Integer[] arr={30,5,10,2,3,10};
			bt.covertToTree(arr);
			Tree<Integer> it=new Tree<>();
			Node<Integer> newRoot=it.convertComplexMethod1(bt.getRoot());
			
			it.printDLL(newRoot);
		} 
}
