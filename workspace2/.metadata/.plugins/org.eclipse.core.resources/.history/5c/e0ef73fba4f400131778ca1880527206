package findAllPossibleInterpretationsOfAnArrayOfDigits;

import java.util.Arrays;

import createtreeusingagivearray.Node;

public class Tree<E> {
	private static final String[] alphabet = {"", "a", "b", "c", "d", "e",
        "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r",
        "s", "t", "u", "v", "w", "x", "v", "z"};
	Node<E>createTree(int data,int arr[],String dataString){
		if(data>26)
			return null;
		String nodeData=dataString+alphabet[data];
		Node<E> newNode=new Node<E>((E) nodeData);
		if(arr.length>0){
			int index=arr[0];
			int newArr[] = Arrays.copyOfRange(arr, 1, arr.length);
			newNode.setLeftRef(createTree(index,newArr,nodeData));
			if(arr.length>1){
			index=arr[0]*10+arr[1];
			newArr=Arrays.copyOfRange(arr, 2, arr.length);
			newNode.setRightRef(createTree(index,newArr,nodeData));
			}
			
		}
		return newNode;
	}
	
	
    public  void printleaf(Node<E> root) {
        if (root == null) 
            return;
 
        if (root.getLeftRef() == null && root.getRightRef() == null) 
            System.out.print(root.getValue() + "  ");
         
        printleaf(root.getLeftRef());
        printleaf(root.getRightRef());
    }
 
    // The main function that prints all interpretations of array
     void printAllInterpretations(int[] arr) {
 
        // Step 1: Create Tree
        Node<E> root = createTree(0, arr, 0);
 
        // Step 2: Print Leaf nodes
        printleaf(root);
 
        System.out.println();  // Print new line
    }
 
    // For simplicity I am taking it as string array. Char Array will save space
    private static final String[] alphabet = {"", "a", "b", "c", "d", "e",
        "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r",
        "s", "t", "u", "v", "w", "x", "v", "z"};
 
    // Driver method to test above methods 
    public static void main(String args[]) {
 
        // aacd(1,1,3,4) amd(1,13,4) kcd(11,3,4)
        // Note : 1,1,34 is not valid as we don't have values corresponding
        // to 34 in alphabet
        int[] arr = {1, 1, 3, 4};
        printAllInterpretations(arr);
 
        // aaa(1,1,1) ak(1,11) ka(11,1)
        int[] arr2 = {1, 1, 1};
        printAllInterpretations(arr2);
 
        // bf(2,6) z(26)
        int[] arr3 = {2, 6};
        printAllInterpretations(arr3);
 
        // ab(1,2), l(12)  
        int[] arr4 = {1, 2};
        printAllInterpretations(arr4);
 
        // a(1,0} j(10)  
        int[] arr5 = {1, 0};
        printAllInterpretations(arr5);
 
        // "" empty string output as array is empty
        int[] arr6 = {};
        printAllInterpretations(arr6);
 
        // abba abu ava lba lu
        int[] arr7 = {1, 2, 2, 1};
        printAllInterpretations(arr7);
    }
}

}
